--------E-310801-----------------------------
INT 31 P - DPMI 1.0+ - FREE PHYSICAL ADDRESS MAPPING
        AX = 0801h
        BX:CX = linear address returned by AX=0800h
Return: CF clear if successful
        CF set on error
            AX = error code (8025h) (see #2293)
Note:   should be called at end of access to device mapped with AX=0800h
SeeAlso: AX=0508h,AX=0509h,AX=0800h,INT 21/AX=EB03h
--------E-310900-----------------------------
INT 31 P - DPMI 0.9+ - GET AND DISABLE VIRTUAL INTERRUPT STATE
        AX = 0900h
Return: CF clear
        virtual interrupts disabled
        AL = previous interrupt state (00h disabled, 01h enabled)
        AH preserved
Notes:  the previous state may be restored simply by executing another INT 31
        a CLI instruction may be used if the previous state is unimportant,
          but should be assumed to be very slow due to trapping by the host
SeeAlso: AX=0901h,AX=0902h
--------E-310901-----------------------------
INT 31 P - DPMI 0.9+ - GET AND ENABLE VIRTUAL INTERRUPT STATE
        AX = 0901h
Return: CF clear
        virtual interrupts enabled
        AL = previous interrupt state (00h disabled, 01h enabled)
        AH preserved
Notes:  the previous state may be restored simply by executing another INT 31
        a STI instruction may be used if the previous state is unimportant,
          but should be assumed to be very slow due to trapping by the host
SeeAlso: AX=0900h,AX=0902h
--------E-310902-----------------------------
INT 31 P - DPMI 0.9+ - GET VIRTUAL INTERRUPT STATE
        AX = 0902h
Return: CF clear
        AL = current interrupt state (00h disabled, 01h enabled)
Note:   should be used rather than PUSHF because that instruction yields the
          physical interrupt state rather than the per-client virtualized
          interrupt flag
SeeAlso: AX=0900h,AX=0901h
--------E-310A00-----------------------------
INT 31 P - DPMI 0.9+ - GET VENDOR SPECIFIC API ENTRY POINT
        AX = 0A00h
        DS:(E)SI -> case-sensitive ASCIZ vendor name or identifier
Return: CF clear if successful
            ES:(E)DI -> FAR extended API entry point
            DS, FS, GS, EAX, EBX, ECX, EDX, ESI, EBP destroyed
        CF set on error
            AX = error code (DPMI 1.0+) (8001h) (see #2293)
Notes:  extended API parameters are vendor-specific
        DPMI 1.0+ supports this function solely for backward compatibility; use
          INT 2F/AX=168Ah instead
        this function is not supported by MS Windows 3.10, BC++ 3.1 DPMILOAD,
          or QDPMI v1.0x; use INT 2F/AX=168Ah instead.  It is supported by
          386MAX v7.01.
SeeAlso: INT 2F/AX=168Ah
--------E-310B00-----------------------------
INT 31 P - DPMI 0.9+ - SET DEBUG WATCHPOINT
        AX = 0B00h
        BX:CX = linear address
        DL = size (1,2,4 bytes)
        DH = type (00h execute, 01h write, 02h read/write)
Return: CF clear if successful
            BX = watchpoint handle
        CF set on error
            AX = error code (DPMI 1.0+) (8016h,8021h,8025h) (see #2293)
SeeAlso: AX=0212h,AX=0601h
--------E-310B01-----------------------------
INT 31 P - DPMI 0.9+ - CLEAR DEBUG WATCHPOINT
        AX = 0B01h
        BX = watchpoint handle
Return: CF clear if successful
        CF set on error
            AX = error code (DPMI 1.0+) (8023h) (see #2293)
Note:   the watchpoint handle is freed
SeeAlso: AX=0B00h
--------E-310B02-----------------------------
INT 31 P - DPMI 0.9+ - GET STATE OF DEBUG WATCHPOINT
        AX = 0B02h
        BX = watchpoint handle
Return: CF clear if successful
            AX = status flags
                bit 0: watch point has been executed since AX=0B00h or AX=0B03h
        CF set on error
            AX = error code (DPMI 1.0+) (8023h) (see #2293)
SeeAlso: AX=0B00h,AX=0B03h
--------E-310B03-----------------------------
INT 31 P - DPMI 0.9+ - RESET DEBUG WATCHPOINT
        AX = 0B03h
        BX = watchpoint handle
Return: CF clear if successful
        CF set on error
            AX = error code (DPMI 1.0+) (8023h) (see #2293)
SeeAlso: AX=0B02h
--------E-310C00-----------------------------
INT 31 P - DPMI 1.0+ - INSTALL RESIDENT HANDLER INIT CALLBACK
        AX = 0C00h
        ES:(E)DI -> resident service provider structure (see #2308)
Return: CF clear if successful
        CF set on error
            AX = error code (8015h,8021h,8025h) (see #2293 at AX=0000h)
Note:   calling this function declares an intent to provide resident
          protected mode services after terminating with AX=0C01h
SeeAlso: AX=0303h,AX=0C01h

Format of DPMI resident service provider structure:
Offset  Size    Description     (Table 2308)
 00h    QWORD   descriptor for 16-bit data segment
 08h    QWORD   descriptor for 16-bit code segment (zeros if not supported)
 10h    WORD    offset of 16-bit callback procedure
 12h  2 BYTEs   reserved
 14h    QWORD   descriptor for 32-bit data segment
 1Ch    QWORD   descriptor for 32-bit code segment (zeros if not supported)
 24h    DWORD   offset of 32-bit callback procedure
--------E-310C01-----------------------------
INT 31 P - DPMI 1.0+ - TERMINATE AND STAY RESIDENT
        AX = 0C01h
        BL = return code
        DX = number of paragraphs of DOS memory to reserve (0 or >= 6)
Return: never
Notes:  should only be used if the program will only provide services to
          other DPMI programs
        any protected mode memory remains allocated to the program unless
          explicitly freed before this call
        must first call AX=0C00h or program will simply be terminated
SeeAlso: AX=0C00h,INT 21/AH=31h
--------E-310D00-----------------------------
INT 31 P - DPMI 1.0+ - ALLOCATE SHARED MEMORY
        AX = 0D00h
        ES:(E)DI -> shared memory allocation request structure (see #2309)
Return: CF clear if successful
            request structure updated
        CF set on error
            AX = error code (8012h,8013h,8014h,8016h,8021h) (see #2293)
Note:   first 16 bytes of memory block will be initialized to zeros on the
          first allocation
SeeAlso: AX=0501h,AX=0D01h,AX=0D02h

Format of DPMI shared memory allocation request structure:
Offset  Size    Description     (Table 2309)
 00h    DWORD   requested length of shared memory block in bytes
 04h    DWORD   (ret) allocated length of block
 08h    DWORD   (ret) shared memory handle
 0Ch    DWORD   (ret) linear address of memory block
 10h    PWORD   selector:offset32 of ASCIZ name for memory block
                (name max 128 bytes)
 16h  2 BYTEs   reserved
 18h  4 BYTEs   reserved (00h)
--------E-310D01-----------------------------
INT 31 P - DPMI 1.0+ - FREE SHARED MEMORY
        AX = 0D01h
        SI:DI = shared memory block handle
Return: CF clear if successful
        CF set on error
            AX = error code (8023h) (see #2293)
Notes:  handle becomes invalid after this call
        DPMI maintains separate global and virtual machine use counts for each
          shared memory block; when the global use counts reaches zero, the
          block is finally destroyed
SeeAlso: AX=0502h,AX=0D00h
--------E-310D02-----------------------------
INT 31 P - DPMI 1.0+ - SERIALIZE SHARED MEMORY
        AX = 0D02h
        SI:DI = shared memory block handle
        DX = flags
            bit 0: return immediately rather than suspending if serialization
                  unavailable
            bit 1: shared rather than exclusive serialization
            bits 2-15 reserved (0)
Return: CF clear if successful
        CF set on error
            AX = error code (8004h,8005h,8017h-8019h,8023h) (see #2293)
Notes:  an exclusive serialization blocks any other serialization attempts for
          the same block by another virtual machine; a shared serialization
          blocks attempts at exclusive serialization by another virtual machine
        hosts are not required to detect deadlock
        a client's interrupt handler can cancel a serialization call which
          caused it to block by calling AX=0D03h
SeeAlso: AX=0D00h,AX=0D03h
--------E-310D03-----------------------------
INT 31 P - DPMI 1.0+ - FREE SERIALIZATION ON SHARED MEMORY
        AX = 0D03h
        SI:DI = shared memory block handle
        DX = flags
            bit 0: release shared serialization rather than exclusive serialztn
            bit 1: free pending serialization
            bits 2-15 reserved (0)
Return: CF clear if successful
        CF set on error
            AX = error code (8002h,8023h) (see #2293 at AX=0000h)
SeeAlso: AX=0D00h,AX=0D02h
--------E-310E00-----------------------------
INT 31 P - DPMI 1.0+ - GET COPROCESSOR STATUS
        AX = 0E00h
Return: CF clear
        AX = coprocessor status (see #2310)
Note:   supported by 386MAX v6.01, which otherwise only supports DPMI 0.9
SeeAlso: AX=0E01h

Bitfields for DPMI coprocessor status:
Bit(s)  Description     (Table 2310)
 0      numeric coprocessor enabled for current client
 1      client is emulating coprocessor
 2      numeric coprocessor is present
 3      host is emulating coprocessor instructions
 4-7    coprocessor type
        0000 none
        0010 80287
        0011 80387
        0100 80486 with numeric coprocessor
        other reserved
 8-15   not used
--------E-310E01-----------------------------
INT 31 P - DPMI 1.0+ - SET EMULATION
        AX = 0E01h
        BX = coprocessor flag bits (see #2311)
Return: CF clear if successful
        CF set on error
            AX = error code (8026h) (see #2293 at AX=0000h)
Note:   supported by 386MAX v6.01, which otherwise only supports DPMI 0.9
SeeAlso: AX=0E00h

Bitfields for DPMI coprocessor flags:
Bit(s)  Description     (Table 2311)
 0      enable numeric coprocessor for current client
 1      client will emulate coprocessor
 2-15   not used
--------E-3157-------------------------------
INT 31 - Netroom3 DPMI.EXE v3.00 - ???
        AH = 57h
        AL = subfunction (at least 02h,03h,04h,05h,07h,08h,09h,0Ah)
        ???
Return: ???
SeeAlso: INT 2C/AX=0000h"RM386"
--------E-315702-----------------------------
INT 31 - Netroom3 DPMI.EXE v3.00 - SWITCH TO PROTECTED MODE
        AX = 5702h
        DX = PSP segment of caller
        STACK: WORD     ???
               WORD     flags (bit 0 set if 32-bit program)
Return: as for DPMI mode-switch entry point (see #1911 at INT 2F/AX=1687h)
Note:   this function is called by the real-mode DPMI mode-switch entry point
SeeAlso: INT 2F/AX=1687h
--------E-31EE00------------------------
INT 31 - DOS32 v3.0+ - GET DOS32 VERSION AND SELECTOR VALUES
        AX = EE00h
Return: AL = minor version (BCD)
        AH = major version (BCD)
        DL = system type (1=raw DOS, 2=XMS, 4=VCPI, 8=DPMI)
        BX = selector of 4GB data segment with zero base address
Program: DOS32 is a 32 bit DOS extender by Adam Seychell.
SeeAlso: AX=EE02h
--------E-31EE02------------------------
INT 31 - DOS32 v3.0+ - GET DOS32 ADDRESS INFORMATION
        AX = EE02h
Return: EBX = 32bit linear address of the program segment
        EDX = Total size in bytes of the programs .EXE file after linking.
        ESI = offset address of PSP
        EDI = offset address of program environment
        ECX = offset address of the program's .EXE ASCIZ file name and path
SeeAlso: AX=EE00h,AX=EE20h
--------E-31EE20------------------------
INT 31 - DOS32 v3.0+ - GET REAL MODE CALL BACK ADDRESS WITH RETF STACK FRAME
        AX = EE20h
        ESI = offset of the real mode call back function
Return: CF clear if successful
            CX:DX = real mode address to call up to the protected mode
                  procedure
        CF set on error
SeeAlso: AX=EE02h,AX=EE21h
--------E-31EE21------------------------
INT 31 - DOS32 v3.0+ - GET REAL MODE CALL BACK ADDRESS WITH IRET STACK FRAME
        AX = EE21h
        ESI = offset of the real mode call back function
Return: CF clear if successful
            CX:DX = real mode address to call up to the protected mode
                  procedure
        CF set on error
SeeAlso: AX=EE20h
--------E-31EE30------------------------
INT 31 - DOS32 v3.0+ - TERMINATE AND STAY RESIDENT
        AX = EE30h
SeeAlso: AX=EE21h,AX=EE40h,INT 21/AH=31h
--------E-31EE40------------------------
INT 31 - DOS32 v3.0+ - UNDO PREVIOUS MEMORY ALLOCATION or DMA BUFFER
        AX = EE40h
Return: CF clear if successful
        CF set on error
SeeAlso: AX=EE41h,AX=EE42h
--------E-31EE41------------------------
INT 31 - DOS32 v3.0+ - ALLOCATE 16KB DMA BLOCK
        AX = EE41h
Return: CF clear if successful
            EBX -> 16KB DMA block (Physical address)
            EDX -> ???
        CF set on error
SeeAlso: AX=EE42h
--------E-31EE42------------------------
INT 31 - DOS32 v3.0+ - ALLOCATE MEMORY BLOCK
        AX = EE42h
        EDX = size in bytes
Return: CF clear if successful
            EAX = size in bytes
            EDX -> memory block
        CF set on error
Note:   Size is rounded off to the next 4kb boundary
SeeAlso: AX=EE41h
--------E-31FF00-----------------------------
INT 31 P - CauseWay - "Info" - GET SYSTEM SELECTORS/FLAGS
        AX = FF00h
Return: AX = selector for flag address space (base 00000000h, limit 4GB)
        BX = selector for current PSP segment (limit 0100h)
        (E)CX = size of DOS transfer buffer (max 64K)
        DX = real-mode segment address of DOS transfer buffer
        ES:(E)SI = protected-mode address of DOS transfer buffer
        EDI = system flags (see #2312)
Program: CauseWay is a 386 DOS extender by Michael Devore and John Wildsmith
          for use with Watcom C++ or assembly language programs
Notes:  the entire transfer buffer can be addressed with a 16-bit offset in
          protected mode
        CauseWay always maps selector 0040h to the BIOS data segment at
          real-mode segment 0040h; when not running under a DPMI host, CauseWay
          also provides selectors A000h, B000h, and B800h mapped to video
          memory
SeeAlso: AX=FF25h

Bitfields for CauseWay system flags:
Bit(s)  Description     (Table 2312)
 0      32-bit code
 1      virtual memory manage enabled
 3-2    mode: 00 raw extended memory, 01 VCPI, 10 DPMI
 4      DPMI available
 5      VCPI available
 6      no memory managers
 7      application descriptor table type: 0 = GDT, 1 = LDT
 14-8   reserved
 15     debugging engine present
--------E-31FF01-----------------------------
INT 31 P - CauseWay - "IntXX" - SIMULATE REAL-MODE INTERRUPT
        AX = FF01h
        BL = interrupt number
        ES:(E)DI -> real-mode register list (see #2298 at AX=0300h)
Return: register list updated
Note:   CauseWay fills in the values for SS, SP, and FLAGS itself, and ignores
          the values specified for CS and IP
SeeAlso: AX=0300h,AX=FF02h
--------E-31FF02-----------------------------
INT 31 P - CauseWay - "FarCallReal" - SIMULATE REAL-MODE FAR CALL
        AX = FF02h
        ES:(E)DI -> real-mode register list (see #2298 at AX=0300h)
Return: register list updated
SeeAlso: AX=0301h,AX=FF01h
--------E-31FF03-----------------------------
INT 31 P - CauseWay - "GetSel" - ALLOCATE NEW SELECTOR
        AX = FF03h
Return: CF clear if successful
            BX = new selector
        CF set on error
Note:   the new selector is initialized with a base address of 000000h, a limit
          of 0000h, and attributes read/write expand-up data
SeeAlso: AX=FF04h,AX=FF05h,AX=FF06h
--------E-31FF04-----------------------------
INT 31 P - CauseWay - "RelSel" - RELEASE A SELECTOR
        AX = FF04h
        BX = selector
Return: CF clear if successful
        CF set on error
SeeAlso: AX=FF03h,AX=FF06h
--------E-31FF05-----------------------------
INT 31 P - CauseWay - "CodeSel" - CONVERT SELECTOR TO EXECUTABLE CODE SELECTOR
        AX = FF05h
        BX = selector
        CL = default operation size (00h = 16-bit, 01h = 32-bit)
Return: CF clear if successful
        CF set on error
SeeAlso: AX=FF03h
--------E-31FF06-----------------------------
INT 31 P - CauseWay - "AliasSel" - CREATE READ/WRITE DATA ALIAS SELECTOR
        AX = FF06h
        BX = original selector
Return: CF clear if successful
            AX = new data selector aliasing original selector
        CF set on error
SeeAlso: AX=FF03h,AX=FF04h
--------E-31FF07-----------------------------
INT 31 P - CauseWay - "GetSelDet" - GET SELECTOR BASE AND LIMIT
        AX = FF07h
        BX = selector
Return: CF clear if successful
            CX:DX = base address
            SI:DI = limit (bytes)
        CF set on error
SeeAlso: AX=FF08h,AX=FF09h
--------E-31FF08-----------------------------
INT 31 P - CauseWay - "GetSelDet32" - GET SELECTOR BASE AND LIMIT (32-bit)
        AX = FF08h
Return: CF clear if successful
            EDX = base address
            ECX = limit (bytes)
        CF set on error
SeeAlso: AX=FF07h,AX=FF0Ah
--------E-31FF09-----------------------------
INT 31 P - CauseWay - "SetSelDet" - SET SELECTOR BASE AND LIMIT
        AX = FF09h
        BX = selector
        CX:DX = new base address
        SI:DI = new byte-granular limit
Return: CF clear if successful
        CF set on error
SeeAlso: AX=FF07h,AX=FF0Ah
--------E-31FF0A-----------------------------
INT 31 P - CauseWay - "SetSelDet32" - SET SELECTOR BASE AND LIMIT (32-bit)
        AX = FF0Ah
        BX = selector
        EDX = new base address
        ECX = new byte-granular limit
Return: CF clear if successful
        CF set on error
SeeAlso: AX=FF08h,AX=FF09h
--------E-31FF0B-----------------------------
INT 31 P - CauseWay - "GetMem" - ALLOCATE BLOCK OF MEMORY
        AX = FF0Bh
        CX:DX = size in bytes (FFFFh:FFFFh to get size of largest available)
Return: CF clear if successful
            BX = selector for accessing block if requested size not FFFFh:FFFFh
            CX:DX = size of largest available block if requested FFFFh:FFFFh
        CF set on error
SeeAlso: AX=FF0Ch,AX=FF0Dh,AX=FF0Fh,AX=FF10h,AX=FF2Ch
--------E-31FF0C-----------------------------
INT 31 P - CauseWay - "GetMem32" - ALLOCATE BLOCK OF MEMORY (32-bit)
        AX = FF0Ch
        ECX = size in bytes (FFFFFFFFh to get size of largest available block)
Return: CF clear if successful
            BX = selector for accessing block if requested size not FFFFh:FFFFh
            ECX = size of largest available block if requested FFFFh:FFFFh
        CF set on error
SeeAlso: AX=FF0Bh,AX=FF0Eh,AX=FF0Fh,AX=FF11h
--------E-31FF0D-----------------------------
INT 31 P - CauseWay - "ResMem" - RESIZE MEMORY BLOCK
        AX = FF0Dh
        BX = selector for block to be resized
        CX:DX = new size in bytes
Return: CF clear if successful
        CF set on error
Note:   the memory block may have to be copied to another location in order
          to satisfy the requested new size, in which case the base address
          of the selector is updated
SeeAlso: AX=FF0Bh,AX=FF0Eh,AX=FF12h
--------E-31FF0E-----------------------------
INT 31 P - CauseWay - "ResMem32" - RESIZE MEMORY BLOCK (32-bit)
        AX = FF0Eh
        BX = selector for block to be resized
        ECX = new size in bytes
Return: CF clear if successful
        CF set on error
Note:   the memory block may have to be copied to another location in order
          to satisfy the requested new size, in which case the base address
          of the selector is updated
SeeAlso: AX=FF0Ch,AX=FF0Dh,AX=FF13h
--------E-31FF0F-----------------------------
INT 31 P - CauseWay - "RelMem" - RELEASE PREVIOUSLY ALLOCATED MEMORY
        AX = FF0Fh
        BX = selector for block to be released
Return: CF clear if successful
        CF set on error
SeeAlso: AX=FF0Bh,AX=FF0Ch,AX=FF14h
--------E-31FF10-----------------------------
INT 31 P - CauseWay - "GetMemLinear" - ALLOCATE MEMORY WITHOUT SELECTOR
        AX = FF10h
        CX:DX = size of block in bytes
Return: CF clear if successful
            SI:DI = linear address of allocated block
        CF set on error
Note:   this function may return addresses above 16M
SeeAlso: AX=FF0Bh,AX=FF11h,AX=FF12h,AX=FF14h
--------E-31FF11-----------------------------
INT 31 P - CauseWay - "GetMemLinear32" - ALLOCATE MEMORY WITHOUT SELECTOR
        AX = FF11h
        ECX = size of block in bytes
Return: CF clear if successful
            ESI = linear address of allocated block
        CF set on error
Note:   this function may return addresses above 16M
SeeAlso: AX=FF0Ch,AX=FF10h,AX=FF13h,AX=FF14h
--------E-31FF12-----------------------------
INT 31 P - CauseWay - "ResMemLinear" - RESIZE LINEAR MEMORY BLOCK
        AX = FF12h
        CX:DX = new size in bytes
        SI:DI = linear address of block to be resized
Return: CF clear if successful
           SI:DI = new linear address of block
        CF set on error
SeeAlso: AX=FF0Dh,AX=FF10h,AX=FF13h
--------E-31FF13-----------------------------
INT 31 P - CauseWay - "ResMemLinear32" - RESIZE LINEAR MEMORY BLOCK (32-bit)
        AX = FF13h
        ECX = new size in bytes
        ESI = linear address of block to be resized
Return: CF clear if successful
           ESI = new linear address of block
        CF set on error
SeeAlso: AX=FF0Eh,AX=FF11h,AX=FF12h
--------E-31FF14-----------------------------
INT 31 P - CauseWay - "RelMemLinear" - RELEASE LINEAR MEMORY BLOCK
        AX = FF14h
        SI:DI = linear address of block to be released
Return: CF clear if successful
        CF set on error
SeeAlso: AX=FF0Fh,AX=FF10h,AX=FF15h
--------E-31FF15-----------------------------
INT 31 P - CauseWay - "RelMemLinear32" - RELEASE LINEAR MEMORY BLOCK (32-bit)
        AX = FF15h
        ESI = linear address of block to be released
Return: CF clear if successful
        CF set on error
SeeAlso: AX=FF0Fh,AX=FF11h,AX=FF15h
--------E-31FF16-----------------------------
INT 31 P - CauseWay - "GetMemNear" - ALLOCATE APPLICATION-RELATIVE MEMORY
        AX = FF16h
        EBX = size in bytes of block to allocate
Return: CF clear if successful
           ESI = application-relative linear address of allocated block
        CF set on error
SeeAlso: AX=FF17h,AX=FF18h,AX=FF19h
--------E-31FF17-----------------------------
INT 31 P - CauseWay - "ResMemNear" - RESIZE APPLICATION-RELATIVE MEMORY BLOCK
        AX = FF17h
        EBX = size in bytes of block to allocate
        ESI = application-relative linear address of block
Return: CF clear if successful
            ESI = new application-relative linear address of block
        CF set on error
SeeAlso: AX=FF16h,AX=FF18h,AX=FF19h
--------E-31FF18-----------------------------
INT 31 P - CauseWay - "RelMemNear" - RELEASE APPLICATION-RELATIVE MEMORY BLOCK
        AX = FF18h
        ESI = application-relative linear address of block
Return: CF clear if successful
        CF set on error
SeeAlso: AX=FF16h,AX=FF17h,AX=FF19h
--------E-31FF19-----------------------------
INT 31 P - CauseWay - "Linear2Near" - CONVERT LINEAR TO APP-RELATIVE ADDRESS
        AX = FF19h
        ESI = linear address
Return: ESI = application-relative linear address
SeeAlso: AX=FF1Ah
--------E-31FF1A-----------------------------
INT 31 P - CauseWay - "Near2Linear" - CONVERT APP-RELATIVE TO LINEAR ADDRESS
        AX = FF1Ah
        ESI = application-relative linear address
Return: ESI = linear address
SeeAlso: AX=FF19h
--------E-31FF1B-----------------------------
INT 31 P - CauseWay - "LockMem" - LOCK REGION OF MEMORY
        AX = FF1Bh
        BX:CX = starting linear address
        SI:DI = size of region in bytes
Return: CF clear if successful
        CF set on error
Desc:   prevent memory from being swapped out by the virtual memory manager
Note:   locks are applied on 4K page boundaries, so memory above and below
          the specified region may be locked as well
SeeAlso: AX=FF1Ch,AX=FF1Dh
--------E-31FF1C-----------------------------
INT 31 P - CauseWay - "LockMem32" - LOCK REGION OF MEMORY (32-bit)
        AX = FF1Ch
        ESI = starting linear address
        ECX = size of region in bytes
Return: CF clear if successful
        CF set on error
Desc:   prevent memory from being swapped out by the virtual memory manager
Note:   locks are applied on 4K page boundaries, so memory above and below
          the specified region may be locked as well
SeeAlso: AX=FF1Bh,AX=FF1Eh,AX=FF1Fh
--------E-31FF1D-----------------------------
INT 31 P - CauseWay - "UnLockMem" - UNLOCK REGION OF MEMORY
        AX = FF1Dh
        BX:CX = starting linear address
        SI:DI = size of region in bytes
Return: CF clear if successful
        CF set on error
Desc:   allow memory to be swapped out by the virtual memory manager
Note:   locks are applied on 4K page boundaries, so memory above and below
          the specified region may be unlocked as well
SeeAlso: AX=FF1Bh,AX=FF1Eh
--------E-31FF1E-----------------------------
INT 31 P - CauseWay - "UnLockMem32" - UNLOCK REGION OF MEMORY (32-bit)
        AX = FF1Eh
        ESI = starting linear address
        ECX = size of region in bytes
Return: CF clear if successful
        CF set on error
Desc:   allow memory to be swapped out by the virtual memory manager
Note:   locks are applied on 4K page boundaries, so memory above and below
          the specified region may be unlocked as well
SeeAlso: AX=FF1Ch,AX=FF1Dh,AX=FF20h
--------E-31FF1F-----------------------------
INT 31 P - CauseWay - "LockMemNear" - LOCK APPLICATION-RELATIVE MEMORY REGION
        AX = FF1Fh
        ESI = starting application-relative linear address
        EBX = size of region in bytes
Return: CF clear if successful
        CF set on error
Desc:   prevent memory from being swapped out by the virtual memory manager
Note:   locks are applied on 4K page boundaries, so memory above and below
          the specified region may be locked as well
SeeAlso: AX=FF1Ch,AX=FF20h
--------E-31FF20-----------------------------
INT 31 P - CauseWay - "UnLockMemNear" - UNLOCK APP-RELATIVE MEMORY REGION
        AX = FF20h
        ESI = starting application-relative linear address
        ECX = size of region in bytes
Return: CF clear if successful
        CF set on error
Desc:   allow memory to be swapped out by the virtual memory manager
Note:   locks are applied on 4K page boundaries, so memory above and below
          the specified region may be unlocked as well
SeeAlso: AX=FF1Eh,AX=FF1Fh
--------E-31FF21-----------------------------
INT 31 P - CauseWay - "GetMemDOS" - ALLOCATE CONVENTIONAL MEMORY
        AX = FF21h
        BX = number of paragraphs to allocate
Return: CF clear if successful
            AX = real-mode segment of allocated block
            DX = initial selector for block
        CF set on error
            AX = DOS error code (see #0960 at INT 21/AH=59h)
            BX = size of largest available block
Note:   if the requested size is greater than 64K, contiguous selectors will
          be allocated, one for each 64K; for 32-bit applications, the first
          selector's limit will be set to the size of the entire block, while
          that selector will have a limit of 64K for 16-bit applications.  All
          selectors after the first one have a limit of 64K except the final
          one
SeeAlso: AX=FF22h,AX=FF23h,INT 21/AH=48h
--------E-31FF22-----------------------------
INT 31 P - CauseWay - "ResMemDOS" - RESIZE CONVENTIONAL MEMORY BLOCK
        AX = FF22h
        BX = new size in paragraphs
        DX = initial selector for block
Return: CF clear if successful
        CF set on error
            AX = DOS error code (see #0960 at INT 21/AH=59h)
            BX = maximum number of paragraphs available
Note:   this function will also fail if the block is expanded past a 64K
          boundary and the next selector is already in use
SeeAlso: AX=FF21h,AX=FF23h,INT 21/AH=49h
--------E-31FF23-----------------------------
INT 31 P - CauseWay - "RelMemDOS" - RELEASE CONVENTIONAL MEMORY BLOCK
        AX = FF23h
        DX = initial selector for block
Return: CF clear if successful
        CF set on error
            AX = DOS error code (see #0960 at INT 21/AH=59h)
Note:   all descriptors allocated for the block are freed
SeeAlso: AX=FF21h,AX=FF22h,INT 21/AH=4Ah
--------E-31FF24-----------------------------
INT 31 P - CauseWay - "ExecOverlay" - LOAD AND OPTIONALLY EXECUTE APP CODE
        AX = FF24h
        EBX = flags
            bit 0: don't execute (overlay only)
            bit 1: don't preserve relocation information
        ES:EDX -> filename (see also #2313)
        FS:ESI -> commandline (ESI = 00000000h if no commandline)
        GS:EDI -> name (CW's /o option)
Return: CF clear if successful
            ---EBX bit 0 set---
            CX:EDX = program entry point (CS:EIP)
            SI = segment of PSP
            ---EBX bit 1 set---
            BX:EAX = initial SS:ESP
            EDI high word = base segment
            EDI low word = number of segments
            EBP = start of segment definitions
        CF set on error
            AX = error code
                0001h DOS file access error
                0002h not a CuaseWay 3P file
                0003h not enough memory
SeeAlso: AX=FF2Ah,INT 21/AH=4Bh

Format of CauseWay executable:
Offset  Size    Description     (Table 2313)
 00h  2 BYTEs   signature "3P"
 02h    DWORD   size of header data in bytes
 06h    DWORD   size of EXE image data in bytes
 0Ah    DWORD   number of bytes of program memory required
 0Eh    WORD    number of segment definitions (see #2315)
 10h    DWORD   number of relocation table entries
 14h    DWORD   offset of program entry point
 18h    WORD    segment list entry number for entry point's CS
 1Ah    DWORD   initial ESP
 1Eh    WORD    segment list entry number for initial SS
 20h    DWORD   control flags (see #2314)
 24h    DWORD   automatic stack size in bytes if ESP entry = 00000000h
 28h    BYTE    length of name (name follows program image)
 29h 23 BYTEs   reserved
SeeAlso: #0881,#0896 at INT 21/AH=4Bh

Bitfields for CauseWay executable control flags:
Bit(s)  Description     (Table 2314)
 0      16-bit interrupt stack frame
 7      descriptor table type (0 = GDT, 1 = LDT)
 14     16-bit default data size
 31     compressed EXE image
Note:   bits 0 and 14 should always be equal
SeeAlso: #2313

Format of CauseWay segment definition [array]:
Offset  Size    Description     (Table 2315)
 00h    DWORD   start offset within program image
 04h    DWORD   length and type
                bits 0-19: length
                bit 20:    granularity (if set, length is in 4K pages)
                bits 21-24: type
                        0000 code
                        0001 read/write data
                        0010 stack
                        0011 read-only data
                bit 25: force segment descriptor's D bit to 0
                bit 26: force segmetn descriptor's D bit to 1
SeeAlso: #2313
--------E-31FF25-----------------------------
INT 31 P - CauseWay - "GetDOSTrans" - GET DOS TRANSFER BUFFER
        AX = FF25h
Return: BX = real-mode segment of transfer buffer
        ECX = transfer buffer size
        DX = protected-mode selector for transfer buffer
Note:   the default buffer size of 8K is sufficient for most applications,
          but an application performing large amounts of file I/O may benefit
          from allocating its own, larger buffer
SeeAlso: AX=FF00h,AX=FF26h
--------E-31FF26-----------------------------
INT 31 P - CauseWay - "SetDOSTrans" - SET DOS TRANSFER BUFFER
        AX = FF26h
        BX = real-mode segment of new transfer buffer
        ECX = new transfer buffer size
        DX = protected-mode selector for new transfer buffer
Return: nothing
Note:   the specific buffer must be located in conventional memory; only the
          first 64K will be used
SeeAlso: AX=FF25h
--------E-31FF27-----------------------------
INT 31 P - CauseWay v1.3 - "GetMCBSize" - GET CURRENT MCB ALLOCATION BLOCK SIZE
        AX = FF27h
Return: ECX = current threshold
Desc:   determine the memory allocation size below which CauseWay will use
          internal MCB chains rather than allocating full 4K pages via DPMI
SeeAlso: AX=FF00h,AX=FF28h
--------E-31FF28-----------------------------
INT 31 P - CauseWay v1.3 - "SetMCBSize" - SET MCB MEMORY ALLOCATION BLOCK SIZE
        AX = FF28h
        ECX = new threshold (0000000h to disable MCB memory allocation system)
Return: CF clear if successful
            threshold unchanged (default 16K)
        CF set on error (threshold > 64K)
Desc:   specify the memory allocation size below which CauseWay will use
          internal MCB chains rather than allocating full 4K pages via DPMI
Note:   the specified threshold will be rounded up to the next higher multiple
          of 4K
SeeAlso: AX=FF00h,AX=FF27h
--------E-31FF29-----------------------------
INT 31 P - CauseWay v1.3 - "GetSels" - ALLOCATE MULTIPLE SELECTORS
        AX = FF29h
        CX = number of selectors to allocate
Return: BX = base selector
Desc:   allocate multiple contiguous selectors, initializing each to have a
          base address and limit of zero
SeeAlso: AX=FF00h,AX=FF04h
--------E-31FF2A-----------------------------
INT 31 P - CauseWay v1.3 - "cwLoad" - LOAD ANOTHER CAUSEWAY PROGRAM AS OVERLAY
        AX = FF2Ah
        DS:EDX -> filename
Return: CF clear if successful
            CX:EDX = CS:EIP of entry point
            BX:EAX = initial SS:ESP for program
            SI = PSP for overlay program
        CF set on error
            AX = error code (01h file error, 02h not a 3P file, 03h no memory)
Note:   the returned PSP can be given to "RelMem" (AX=FF0Fh) to release the
          overlay's memory and selectors; only selectors and memory allocated
          during loading will be freed by RelMem unless one switches PSPs with
          INT 21/AH=50h
SeeAlso: AX=FF00h,AX=FF24h
--------E-31FF2B-----------------------------
INT 31 P - CauseWay v1.3 - "cwcInfo" - VALIDATE AND GET SIZE OF CWC FILE
        AX = FF2Bh
        BX = file handle for CWC-compressed file
Return: CF clear if successful
            ECX = expanded file size
        CF set on error (not a CWC-compressed file)
SeeAlso: AX=FF00h,AX=FFFBh
--------E-31FF2C-----------------------------
INT 31 P - CauseWay v1.3 - "GetMemSO" - ALLOCATE MEMORY AND RETURN SEL:OFFSET
        AX = FF2Ch
        CX:DX = block size in bytes
Return: CF clear if successful
           SI:DI = selector:offset of allocated memory
        CF set on error
Note:   unlike "GetMem" (AX=FF0Bh), this function will reuse selectors until a
          segment is full, rather than allocating a new selector for each
          memory block
SeeAlso: AX=FF00h,AX=FF2Dh,AX=FF2Eh
--------E-31FF2D-----------------------------
INT 31 P - CauseWay v1.3 - "ResMemSO" - RESIZE SELECTOR:OFFSET MEMORY BLOCK
        AX = FF2Dh
        SI:DI = selector:offset for memory block
        CX:DX = new size of block
Return: CF clear if successful
           SI:DI = new selector:offset for memory block
        CF set on error
SeeAlso: AX=FF00h,AX=FF2Ch,AX=FF2Eh
--------E-31FF2E-----------------------------
INT 31 P - CauseWay v1.3 - "RelMemSO" - RELEASE SELECTOR:OFFSET MEMORY BLOCK
        AX = FF2Eh
        SI:DI = selector:offset for memory block
SeeAlso: AX=FF00h
--------E-31FFFB-----------------------------
INT 31 P - Causeway v1.3 - "cwcLoad" - LOAD/EXPAND CWC-COMPRESSED FILE
        AX = FFFBh
        BX = source file handle
        ES:EDI -> memory buffer into which to expand file
Return: CF clear if successful
            ECX = expanded data length
        CF set on error
            EAX = error code (01h file error, 02h bad data, 03h not CWC file)
Note:   the provided file may consist of the concatenation of several CWC
          files; the one beginning at the current file position will be
          expanded
SeeAlso: AX=FF2Bh


