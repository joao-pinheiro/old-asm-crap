;[·]------------------------------------------------------------------------------------------[·]
; |											       |
; |   VESA 256 COLOR MODULE - CODED BY JOÃO PINHEIRO					       |
; |											       |
; |   Copyright (c) 1998, João Pinheiro							       |
; |   All rights reserved                                                                      |
; |											       |
;[·]------------------------------------------------------------------------------------------[·]

;OK, REAL NICE GFX STUFF !!!

.586P
.MODEL LARGE,PASCAL


INCLUDE DPMI.INC
INCLUDE SYSTEM.INC
INCLUDE MACROS.INC
INCLUDE MATH.INC
INCLUDE MSDOS.INC
INCLUDE PALETTE.INC
INCLUDE DEBUG.INC   ;<-------------------- A TIRAR!!!!

CODESTART

LOCALS @@

;##############################################################################################
;# VESA MODULE										      #
;##############################################################################################
;------------------------------------------------------------------------

_640x400x256  = 0100h    ;VESA MODES
_640x480x256  = 0101h
_800x600x16   = 0102h
_800x600x256  = 0103h


MWINSUPPORTED = 001h     ;BIT 1 - WINDOW IS SUPPORTED
MWINREADABLE  = 002h     ;BIT 2 - WINDOW IS READABLE
MWINWRITEABLE = 004h     ;BIT 3 - WINDOW IS WRITEABLE


MMODEL4PLANE  = 03h      ;MEMORY MODEL OF 4-PLANE PLANAR
MMODELPACKED  = 04h      ;MEMORY MODEL OF PACKED PIXEL
MMODELMODEX   = 05h      ;NON CHAIN, 256 COLOR MEMORY MODEL
MMODELRGB     = 06h      ;RGB MEMORY MODEL (HIGH AND TRUECOLOR)


;------------------------------------------------------------------------

VESAINFOBLOCK STRUC
   SIGNATURE		DD ?  ;ASSINATURA
   VESAVERSION		DW ?  ;VERSÃO DO DRIVER
   OEMSTRINGPTR		DD ?  ;PTR PARA ID OEM
   CAPABILITIES		DD ?  ;FLAGS
   VIDEOMODEPTR		DD ?  ;PTR TO VIDEO MODE ARRAY
   PAD1			DB 238 DUP(0)
VESAINFOBLOCK ENDS


MODEINFOBLOCK STRUC
   MODEATTRIBUTES   	DW ? ;ATTR DE MODO
   WINAATTRIBUTES	DB ? ;ATTR DA JANELA A
   WINBATTRIBUTES	DB ? ;ATTR DA JANELA B
   WINGRANULARITY	DW ? ;GRANULARIDADE DA JANELA
   WINDOWSIZE		DW ? ;TAMANHO DA JANELA, EM KB
   WINASEGMENT		DW ? ;SEGMENTO DA JANELA A
   WINBSEGMENT		DW ? ;SEGMENTO DA JANELA B  
   WINFNPTR		DD ? ;PTR PARA FUNÇÃO DA JANELA
   BYTESPERSCANLINE	DW ? ;BYTES POR SCAN LINE
   XRESOLUTION		DW ? ;RESOLUÇÃO HORIZONTAL
   YRESOLUTION		DW ? ;RESOLUÇÃO VERTICAL
   XCHARSZ		DB ? ;TAMANHO DA CAIXA DE CARACTERE EM PIXELS
   YCHARSZ		DB ?
   NUMBEROFPLANES	DB ? ;Nº DE PLANOS DE MEMÓRIA
   BITSPERPIXEL	        DB ? ;Nº DE BITS POR PIXEL
   NUMBEROFBANKS	DB ? ;Nº DE BANCOS
   MEMORYMODEL		DB ? ;TIPO DE ORGANIZAÇÃO DE MEMÓRIA
   BANKSIZE		DB ? ;TAMANHO DE CADA BANCO, EM Kb
   IMAGEPAGES		DB ? ;Nº DE PÁGINAS DE VÍDEO
   PAD2 		DB 225 DUP(0)
MODEINFOBLOCK ENDS

;------------------------------------------------------------------------

VESA_FAIL1 DB 'VESA VIDEO BIOS EXTENSION NOT FOUND!',0AH,0DH,7,'$' 
VESA_FAIL2 DB 'DESIRED VESA MODE NOT SUPPORTED',,0AH,0DH,7,'$' 


VESAINFO  VESAINFOBLOCK <>  ;VESA INFO BLOCK STRUCTURE
MODEINFO  MODEINFOBLOCK <>  ;VESA MODE BLOCK STRUCTURE

;------------------------------------------------------------------------

READ_WINDOW   DD ?    ;READ WINDOW LINEAR ADDX
WRITE_WINDOW  DD ?    ;WRITE WINDOW LINEAR ADDX
READ_ID	      DB ?    ;READ WINDOW NO (A-0, B-1)
WRITE_ID      DB ?    ;WRITE WINDOW NO (A-0, B-1)

XMAX	      DW ?    ;SCREEN WIDTH
YMAX 	      DW ?    ;SCREEN HEIGHT
BITSPIXEL     DB ?,?  ;BITS PER PIXEL
SCANBYTES     DW ?    ;BYTES POR SCAN LINE
WINSIZE       DD ?    ;BANK SIZE, IN BYTES
WINGRAN	      DD ?    ;WINDOW GRANULARITY
PAGES	      DB ?    ;Nº DE PÁGINAS

BANKSWITCH    DD ?    ;BANK SWITCH PROC

FRAMEBUFFER   DD ?    ;VIDEO FRAME BUFFER
SCREENSIZE    DD ?    ;SCREEN SIZE, IN BYTES

;------------------------------------------------------------------------
; GETS SVGA INFORMATION
;

GETVESAINFO PROC NEAR

	MOV REGS._ES,SEG VESAINFO		;GET SVGA INFO
	MOV EDI,OFFSET VESAINFO
	MOV AX,4F00H
	INTR 10H
	CMP AX,004Fh
	JNE @@VESA_FAIL				;NO VESA OR NOT SUPPORTED
	
	MOV EAX,'ASEV'				;CHECK SIGNATURE

	CMP DWORD PTR DS:[EDI][VESAINFOBLOCK.SIGNATURE],EAX
	JE @@VESA_GOOD

  @@VESA_FAIL:	
	CALL FAIL PASCAL, OFFSET VESA_FAIL1	;ABORT WITH MSG

  @@VESA_GOOD:
	RET
       ENDP

;------------------------------------------------------------------------
; GETS MODE SPECIFIC INFORMATION
; RETS AX WITH 0 IF SUCCESS

GETMODEINFO PROC NEAR
	ARG @MODE:DWORD

	MOV EAX,4F01H
	MOV ECX,@MODE
	MOV REGS._ES,SEG MODEINFO
	MOV EDI,OFFSET MODEINFO
	INTR 10H
	SUB AX,004FH
	RET
       ENDP	

;------------------------------------------------------------------------
; SETS VESA VIDEO MODE
; RETS AX WITH 0 IF SUCCESS

SETMODE PROC NEAR
	ARG @MODE:DWORD

	MOV EAX,04F02h
	MOV EBX,@MODE
	INTR 10H
	SUB AX,004FH
	RET
       ENDP	

;------------------------------------------------------------------------
; SETS A VESA MODE AND FILL IN THE INTERNAL FIELDS
; RETURNS AX=0 IF SUCCEED

SETVESAMODE PROC NEAR
            ARG @MODE:WORD
            
	    PUSH 0
	    PUSH 0
	    POP READ_WINDOW     		  ;LIMPA OS ENDEREÇOS LINEARES
	    POP WRITE_WINDOW
            
	    CALL GETMODEINFO PASCAL,@MODE         ;PREENCHE O CAMPO COM OS DADOS DO NOVO MODO
            CMP AX,0
            JNE @@VESA_FAIL               	  ;IF ERROR THEN QUIT
	    TEST MODEINFO.MODEATTRIBUTES,1	  ;SE O MODO NÃO FOR SUPORTADO POR HARDWARE
	    JZ @@VESA_FAIL

            MOV AL,MODEINFO.WINAATTRIBUTES
            MOV AH,MODEINFO.WINBATTRIBUTES
            MOVZX EDX,MODEINFO.WINASEGMENT
	    SHL EDX,4
	    XOR EBX,EBX
	    TEST AL,MWINSUPPORTED                 ;A JANELA A É SUPORTADA?
            JZ @@CHECK_WINB
	    TEST AL,MWINREADABLE		  ;PERMITE LEITURA?
	    JZ @@CHECK_A_WRITABLE
	    SETZ READ_ID
	    MOV READ_WINDOW,EDX			  ;SE SIM, SETA JANELA DE LEITURA 
	    
  @@CHECK_A_WRITABLE:	
	    TEST AL,MWINWRITEABLE		  ;PERMITE ESCRITA?
	    JZ @@CHECK_WINB
	    SETZ WRITE_ID
	    MOV WRITE_WINDOW,EDX		  ;SE SIM, SETA JANELA DE ESCRITA

  @@CHECK_WINB:
            MOVZX EDX,MODEINFO.WINBSEGMENT
	    SHL EDX,4
            TEST AH,MWINSUPPORTED
	    JNZ @@CHECK_B_READABLE
	    TEST AL,MWINSUPPORTED
	    JZ @@VESA_FAIL
	    JMP @@CHECK_XINFO

  @@CHECK_B_READABLE:
	    TEST AH,MWINREADABLE
	    JZ @@CHECK_B_WRITABLE
            CMP READ_WINDOW,0  		  	;SE A JANELA A FOR DE LEITURA
	    SETE READ_ID	    
            JE @@WINB_C1			
	    CMP WRITE_WINDOW,0			;SE SIM, E NÃO FOR DE ESCRITA, A 
	    JE @@CHECK_B_WRITABLE		;JANELA B PASSA A SER DE ESCRITA
	    SETNE READ_ID
	    MOV READ_WINDOW,EDX 	        ;SE TAMBÉM FOR DE ESCRITA, A JAN.B PASSA
					        ;A SER DE LEITURA E CONTINUA
	    JMP @@CHECK_XINFO

    @@WINB_C1:					;A JANELA B É DE LEITURA
	    MOV READ_WINDOW,EDX
	    
  @@CHECK_B_WRITABLE:
	    TEST BL,2				;SE JÁ EXISTIR JAN. DE ESCRITA, SALTA	
	    JE @@CHECK_XINFO
	    TEST AH,MWINWRITEABLE
	    JZ @@VESA_FAIL			;SE A JAN B NÃO SUPORTAR ESCRITA, SAI
	    SETNZ WRITE_ID
	    MOV WRITE_WINDOW,EDX
 
  @@CHECK_XINFO:
	    MOV AX,MODEINFO.XRESOLUTION
	    MOV BX,MODEINFO.YRESOLUTION
	    MOV CX,MODEINFO.BYTESPERSCANLINE
	    MOV DL,MODEINFO.BITSPERPIXEL
	    MOV XMAX,AX
	    MOV YMAX,BX
	    MOV BITSPIXEL,DL		
	    MOV SCANBYTES,CX
	    MOVZX EAX,MODEINFO.WINDOWSIZE
	    SHL EAX,10				;WINDOW SIZE IN BYTES
	    MOV WINSIZE,EAX
		
	    MOVZX ECX,MODEINFO.WINGRANULARITY
	    CMP ECX,0
	    JE @@VESA_FAIL
	    SHL ECX,10
	    MOV WINGRAN,ECX
	    TEST MODEINFO.MODEATTRIBUTES, 02h
	    SETZ PAGES
	    JZ @@NOPAGES 
            MOV AL,MODEINFO.IMAGEPAGES
	    MOV PAGES,AL		         ;VIDEO PAGES

  @@NOPAGES:
            PUSH MODEINFO.WINFNPTR		 ;BANK SWITCH PROC
	    POP BANKSWITCH
	
 	    CALL SETMODE PASCAL,@MODE
	    CMP AX,0
	    JE @@VESA_QUIT

  @@VESA_FAIL:
	    MOV EAX,1
	    
  @@VESA_QUIT:
            RET
           ENDP

;------------------------------------------------------------------------
; BANK SWITCH ROUTINE
;

BANKSW:
	PUSH ES
	MOV ES,CS:SDATA32
	MOV EDI,OFFSET REGS
	MOV EAX,0301h
	
	MOV ECX,DWORD PTR CS:BANKSWITCH      ;OFFSET
	MOV ES:REGS._IP,CX
	SHR ECX,16
	MOV ES:REGS._CS,CX
	XOR ECX,ECX
	XOR EBX,EBX
	INT 31H
	POP ES
	RET

	
;------------------------------------------------------------------------
; COPY VIRTUAL PAGE TO SCREEN
; USES BANKSWITCH IN REAL MODE -- SLOOOW!! 
       
TRANSFER PROC NEAR
ALIGN 8
	USES ES,DS
    	MOV ESI,CS:FRAMEBUFFER
	MOV DX,03DAh			;RETRACE!!
     @RETR1:
        IN AL,DX
	TEST AL,8
	JNZ @RETR1
    @RETR2:
        IN AL,DX
	TEST AL,8
	JZ @RETR2

        MOV EDX,0 
	XOR EBX,EBX
   @L1:     
	PUSH EDX
   	MOV BL,WRITE_ID
   	MOV DWORD PTR REGS._BX,EBX
   	MOV DWORD PTR REGS._DX,EDX
   	CALL BANKSW
	MOV DX,DS
	MOV DS,CS:SDATA0
	MOV EDI,CS:WRITE_WINDOW
	MOV ECX,16384
	CLD
	REP MOVSD
	MOV DS,DX
	POP EDX
	INC EDX
	CMP EDX,4
	JNE @L1
	
	
   	MOV BL,WRITE_ID
   	MOV DWORD PTR REGS._BX,EBX
   	MOV DWORD PTR REGS._DX,EDX
   	CALL BANKSW
	MOV DX,DS
	MOV DS,CS:SDATA0
	MOV EDI,CS:WRITE_WINDOW
	MOV ECX,11265
	CLD
	REP MOVSD
	MOV DS,DX
	RET
     ENDP


FRAMEBUFFER_SIZE = 307200     ;TAMANHO DO FRAME BUFFER, EM BYTES

;------------------------------------------------------------------------
; CLEAR SCREEN WITH COLOR IN EAX
;

CLS PROC NEAR

    USES EDI,ECX	
    MOV EDI,FRAMEBUFFER
    MOV ECX,FRAMEBUFFER_SIZE/4
    CLD
    REP STOSD
    RET
   ENDP

;------------------------------------------------------------------------
; PUT PIXEL IN VSCREEN. ASSUMES ES:SDATA0
;

PUTPIXEL PROC NEAR
	ARG @X:DWORD,@Y:DWORD,@C:BYTE

	USES EAX,EDI
	MOV EAX,@Y
	MOV EDI,@Y
	SHL EAX,9
	SHL EDI,7
	ADD EDI,EAX    ;EDI=Y*640+X
	ADD EDI,FRAMEBUFFER
	ADD EDI,@X
	MOV AL,@C
	MOV ES:[EDI],AL
	RET
       ENDP


PSET MACRO REG_PY,REG_PX,COR
	
	MOV EDI,REG_PY
	SHL REG_PY,9
	SHL EDI,7
	ADD REG_PY,REG_PX
	ADD EDI,FRAMEBUFFER
	ADD EDI,REG_PY
	MOV [EDI],COR
	ENDM


CALCOFFSET MACRO

	MOV EDI,EDX
	SHL EDI,7
	SHL EDX,7
	ADD EDI,EDX
	ADD EDI,EBX
	ADD EDI,FRAMEBUFFER
	ENDM

;##############################################################################################
;# DRAWING MODULE									      #
;##############################################################################################

LINE3D PROC NEAR
         ARG @X:DWORD,@Y:DWORD,@Z:DWORD,@X1:DWORD,@Y1:DWORD,@Z1:DWORD,@C:DWORD

         LOCAL DX1:DWORD,DX2:DWORD,DY1:DWORD,DY2:DWORD
	 LOCAL S:DWORD,TDX:DWORD,TDY:DWORD,TDZ:DWORD

	 MOV EDI,@Y
	 MOV EDX,EDI
	 SHL EDX,9
	 SHL EDI,7
         ADD EDI,EDX
	 ADD EDI,@X
         MOV ESI,EDI
	 SHL ESI,1
	 ADD ESI,CS:[ZBUFFER]		;CALC Z-BUFFER OFFSET
	 ADD EDI,CS:[FRAMEBUFFER]

         XOR EDX,EDX
         MOV DY2,EDX     ;DY2:=0

         MOV EAX,@X1
         SUB EAX,@X      ;TDX:=X1-X
         SETNZ DL
         JNS @@NO_ABS_X ;IF X1-X<0 THEN BEGIN
         MOV EDX,-1
         NEG EAX

  @@NO_ABS_X:
         MOV DX1,EDX
         MOV DX2,EDX

         MOV EDX,640
         MOV EBX,@Y1     ;TDY:=Y1-Y
         SUB EBX,@Y
         JNS @@NO_ABS_Y ;IF Y1-Y<0 THEN BEGIN
         MOV EDX,-640    ;DECREMENTA POR 640
         NEG EBX

  @@NO_ABS_Y:
         CMP EBX,0 	;IF X1-X=0 THEN DY:=0
	 JNE @@NO_ABS_Y_2
	 XOR EDX,EDX

  @@NO_ABS_Y_2:
	 MOV DY1,EDX

         MOV EDX,@Z1      ;DZ:=Z1-Z
         SUB EDX,@Z
         MOV TDZ,EDX

         CMP EAX,EBX      ;IF DX<DY THEN bEGIN
         JA @@LL1
         MOV DX2,0      ;DX2:=0
	 MOV ECX,DY1
	 MOV DY2,ECX
         XCHG EAX,EBX   ;TDX:=TDY;TDY:=TDX

 @@LL1:
         MOV ECX,DY1     ;DX1:=DX1+DY1
         ADD ECX,DX1
	 MOV DX1,ECX
	 SHL ECX,1
         MOV DY1,ECX     ;DY1:=DX1 SHL 1 (PARA O Z-BUFFER)
         MOV ECX,DY2     ;DX1:=DX1+DY1
	 ADD ECX,DX2
	 MOV DX2,ECX
	 SHL ECX,1       ;DY2:=DX2 SHL 1 (PARA O Z-BUFFER)
	 MOV DY2,ECX

         CMP EAX,0
	 JNE @@NO_DIVBY0
	 INC EAX

 @@NO_DIVBY0:
         MOV TDX,EAX
         MOV TDY,EBX
         MOV ECX,EAX      ;FOR I:=0 TO TDX
	 SHR EAX,1
         MOV S,EAX
         MOV EAX,ECX
         XCHG EAX,EDX     ;AX->TDZ
         CLD

 @@FOR__001:
         PUSH EAX EDX
         IMUL ECX        ;AX:=(DZ*I)
         IDIV TDX
         ADD EAX,@Z

         CMP ES:[ESI],AX
	 JG @@SKIP_POINT
	 MOV ES:[ESI],AX ;PLOT IN Z-BUFFER
	 	
	 MOV EAX,@C	 ;PLOT POINT!!
         MOV ES:[EDI],AL

 @@SKIP_POINT:
         POP EDX
         MOV EAX,S
         ADD EAX,EBX    ;S:=S+TDY
         CMP EAX,EDX    ;IF S>TDX THEN BEGIN
         JBE @@LL2

         SUB EAX,EDX    ;S:=S-TDX
	 ADD ESI,DY1
         ADD EDI,DX1
         JMP @@LL3
 @@LL2:
	 ADD EDI,DX2
	 ADD ESI,DY2
 @@LL3:
         MOV S,EAX
         POP EAX
         LOOP @@FOR__001
         RET
ENDP


BAR PROC NEAR
	ARG @X,@Y,@X1,@Y1,@Z,@C:DWORD

	 MOV EDI,@Y
	 MOV EDX,EDI
	 SHL EDX,9
	 SHL EDI,7
         ADD EDI,EDX
	 ADD EDI,@X
         MOV ESI,EDI
	 SHL ESI,1
	 ADD ESI,CS:[ZBUFFER]		;CALC Z-BUFFER OFFSET
	 ADD EDI,CS:[FRAMEBUFFER]
	
     	 MOV ECX,@Y1
 	 SUB ECX,@Y
	 MOV EBX,@X1
	 SUB EBX,@X	
	 MOV EAX,@C
	 MOV EDX,@Z
  	 CLD

  @@LOOP_Y:
	 PUSH ECX
	 PUSH EDI ESI
	 MOV ECX,EBX
      	 REP STOSB
 	 XCHG ESI,EDI
	 MOV ECX,EBX
	 XCHG EAX,EDX
      	 REP STOSW
	 XCHG EAX,EDX
	 POP ESI EDI
	 ADD ESI,640*2
	 ADD EDI,640
	POP ECX
	LOOP @@LOOP_Y
	RET
ENDP




;##############################################################################################
;# Z-BUFFER MODULE									      #
;##############################################################################################


ZBUFFER_SIZE = FRAMEBUFFER_SIZE*2    ;TAMANHO DO Z-BUFFER
MINZ	     = -7FFFh		     ;VALOR MÍNIMO DE Z

ZBUFFER DD ?  ;LINEAR ADDX DO Z-BUFFER


;------------------------------------------------------------------------
; LIMPA O Z-BUFFER
;

CLZ PROC NEAR

	MOV EDI,ZBUFFER
	MOV ECX,ZBUFFER_SIZE/4
	CLD
	REP STOSD
	RET

       ENDP


;------------------------------------------------------------------------
; INICIALIZA O Z-BUFFER
;

INITZBUFFER PROC NEAR

	CALL MALLOC PASCAL,ZBUFFER_SIZE
	MOV ZBUFFER,EDI
	MOV AX,MINZ
	SHL EAX,16
	MOV AX,MINZ
	CALL CLZ
	RET

       ENDP


;------------------------------------------------------------------------
; DESENHA UM PIXEL USANDO Z-BUFFER
;

PIXEL3D PROC NEAR
	ARG @X:DWORD,@Y:DWORD,@Z,@C:BYTE

	MOV EAX,@Y
	MOV EDI,@Y
	SHL EAX,9
	SHL EDI,7
	ADD EDI,EAX    		;EDI=Y*640+X
	ADD EDI,@X
	MOV EBX,EDI
	MOV EAX,@Z
	ADD EDI,EDI
	ADD EDI,ZBUFFER
	CMP [EDI],EAX
	JG @PIX_SKIP

	XCHG EDI,EBX
	ADD EDI,FRAMEBUFFER
	MOV AL,@C
	MOV ES:[EDI],AL

 @PIX_SKIP:
	RET
       ENDP




;=============================================================================================

TEMPP PALSTRUC <>
TEMPP2 PALSTRUC <>	
COUNTB DD ?
TV1    DD ?
TV2    DD ?

;=============================================================================================

PCXHEADER STRUC
	    MANUF    DB ?
	    VERS     DB ?   	;VERSION OF FILE
	    ENCODING DB ?	;ENCODING TYPE
            BPP      DB ?	;BITS PER PIXEL
	    X_MIN    DW ?	;COORDINATES	
            Y_MIN    DW ?
            X_MAX    DW ?
	    Y_MAX    DW ?
            HRES     DW ?	;RESOLUTION
            VRES     DW ?
	    PAL16    DB 48 DUP(?) ;PALETTE DE 16 CORES
	    RESERVED DB ?
            COLOR_PL DB ?       ;Nº DE PLANOS DE COR
            BYTES_LINE DW ?     ;Nº DE BYTES POR LINHA
	    PALTYPE    DW ?     ;TIPO DE PALETTE
	    PADD     DB 58 DUP(?)
PCXHEADER ENDS


GSIGNATURE = 0415Ah

GRHEADER STRUC
	  MAGIC    DW ?
	  GWIDTH   DW ?
	  GHEIGHT  DW ?
	  BPL      DW ?
	  HAVEPAL  DW ?
GRHEADER ENDS

;READS A GR FILE FROM DISK

DECODEGR PROC NEAR
	  ARG @NAME:DWORD,@DEST:POINTER

	 
	  LOCAL F:DWORD,FSIZE:DWORD
	  LOCAL MBLOCK:DWORD

	  CALL FOPEN PASCAL,@NAME,FREADONLY
	  MOV F,EAX
	  CMP EAX,0
	  JE @@GRDECODE_ERROR
	  CALL GETFILESIZE PASCAL,EAX
	  MOV FSIZE,EAX
	  SHR EAX,4				;ALIGN BYTES TO REQUEST MEM BLOCK
	  INC EAX
	  SHL EAX,4
	  CALL MALLOC PASCAL,EAX
	  MOV MBLOCK,EDI

	  CALL FREAD PASCAL,F,ES,EDI,FSIZE	;READS ALL FILE
	  CALL FCLOSE PASCAL,F
	  MOV EDI,MBLOCK
	  CMP WORD PTR ES:[EDI],GSIGNATURE	;NOPE, NOT A GR FILE
	  JNE @@GRDECODE_ERROR_M

	  MOV BX,ES:[EDI][GRHEADER.GHEIGHT]
	  MOV AX,ES:[EDI][GRHEADER.BPL]
	  
	  XOR EDX,EDX				;Nº DE BYTES A ESCREVER
	  MUL BX
	  MOV CX,DX
	  SHL ECX,16
	  MOV CX,AX
	  MOV DS,CS:SDATA0			;DS:=SDATA0
	  MOV ESI,EDI
 	  LPTR ES,EDI,@DEST
	  PUSH ESI
	  ADD ESI,10				;OFFSET DO BITMAP RLE
	  CLD
	  
ALIGN 4	  
   @@GRPROCESS_LINE:
	  LODSB
	  MOV BL,AL
	  AND BL,192
          CMP BL,192
	  JE @@GRUNPACK_RLE
	  
	  STOSB
	  LOOP @@GRPROCESS_LINE
          JMP @@GRNO_MORE			;ENDS UNPACKING
		  
   @@GRUNPACK_RLE:
	  AND EAX,03Fh			;COUNT BYTE
	  SUB ECX,EAX			;SUBS FROM COUNTER
	  PUSH ECX 
	  MOV ECX,EAX
	  LODSB 			;COLOR
	  CLD
	  REP STOSB
	  POP ECX

	  INC ECX			;CUZ LOOP WILL DEC ECX UNECESSARILY
	  LOOP  @@GRPROCESS_LINE

  @@GRNO_MORE:
	  POP EDI
	  CMP DS:[EDI][GRHEADER.HAVEPAL],0
	  JE @@GRGO_ON

	  INC ESI			;SKIP SAFE BYTE

 @@GRGO_ON:
	  MOV DS,CS:SDATA32
	  CALL SETPAL PASCAL,ES,ESI
	  CALL MDALLOC PASCAL,MBLOCK
	  
	  JMP @@GRDECODE_QUIT

  @@GRDECODE_ERROR_M:
	  CALL MDALLOC PASCAL,MBLOCK

  @@GRDECODE_ERROR:
	  CALL FCLOSE PASCAL,F
  	  STC
 
  @@GRDECODE_QUIT:
	  RET
	ENDP




DECODEPCX PROC NEAR
	  ARG @NAME:DWORD,@DEST:POINTER

	  LOCAL F:DWORD,FSIZE:DWORD
	  LOCAL PWIDTH:WORD,PHEIGHT:WORD
	  LOCAL MBLOCK:DWORD

	  CALL FOPEN PASCAL,@NAME,FREADONLY
	  MOV F,EAX
	  CMP EAX,0
	  JE @@DECODE_ERROR
	  CALL GETFILESIZE PASCAL,EAX
	  MOV COUNTB,EAX
          MOV FSIZE,EAX
	  SHR EAX,4				;ALIGN BYTES TO REQUEST MEM BLOCK
	  INC EAX
	  SHL EAX,4
	  CALL MALLOC PASCAL,EAX
	  MOV MBLOCK,EDI
	  PUSH EDI
	  MOV ECX,FSIZE
	  XOR EAX,EAX
	  CLD
	  REP STOSB
	  POP EDI
	  CALL FREAD PASCAL,F,ES,EDI,FSIZE	;READS ALL FILE
	  CALL FCLOSE PASCAL,F
	  MOV EDI,MBLOCK
	  CMP WORD PTR ES:[EDI],050Ah
	  JNE @@DECODE_ERROR_M

	  CMP ES:[EDI][PCXHEADER.BPP],8
	  JNE @@DECODE_ERROR_M
	  CMP ES:[EDI][PCXHEADER.COLOR_PL],1
	  JNE @@DECODE_ERROR_M

	  MOV AX,ES:[EDI][PCXHEADER.X_MAX]
	  MOV BX,ES:[EDI][PCXHEADER.Y_MAX]
	  SUB AX,ES:[EDI][PCXHEADER.X_MIN]
	  SUB BX,ES:[EDI][PCXHEADER.Y_MIN]
	  MOV PWIDTH,AX			;LARGURA DO BITMAP
	  MOV PHEIGHT,BX	        ;ALTURA DO BITMAP
	  MOV AX,ES:[EDI][PCXHEADER.BYTES_LINE]
	  
	  INC EBX
	  XOR EDX,EDX				;Nº DE BYTES A ESCREVER
	  MUL BX
	  MOV CX,DX
	  SHL ECX,16
	  MOV CX,AX
	  MOV DS,CS:SDATA0			;DS:=SDATA0
	  MOV ESI,EDI
 	  LPTR ES,EDI,@DEST
	  ADD ESI,128				;OFFSET DO BITMAP RLE
	  CLD
	  
ALIGN 4	  
   @@PROCESS_LINE:
	  LODSB
	  MOV BL,AL
	  AND BL,192
          CMP BL,192
	  JE @@UNPACK_RLE
	  
	  STOSB
	  LOOP @@PROCESS_LINE
          JMP @@NO_MORE			;ENDS UNPACKING
		  
   @@UNPACK_RLE:
	  AND EAX,03Fh			;COUNT BYTE
	  SUB ECX,EAX			;SUBS FROM COUNTER
	  PUSH ECX 
	  MOV ECX,EAX
	  LODSB 			;COLOR
	  CLD
	  REP STOSB
	  POP ECX

	  INC ECX			;CUZ LOOP WILL DEC ECX UNECESSARILY
	  LOOP  @@PROCESS_LINE

  @@NO_MORE:

	  INC ESI
	  PUSH ESI			;OK, NOW SHIFT PALETTE BY 2
	  MOV EDI,ESI
	  MOV ECX,768/2
	  CLD
  @@PAL_LOOP:
	  LODSW				;IN WORD STEPS
	  SHR AL,2
	  SHR AH,2
	  STOSW
	  LOOP @@PAL_LOOP		;TILL ALL'S DONE
	  POP ESI

	  MOV DS,CS:SDATA32
	  CALL SETPAL PASCAL,ES,ESI
	  CALL MDALLOC PASCAL,MBLOCK
	  
	  JMP @@DECODE_QUIT

  @@DECODE_ERROR_M:
	  CALL MDALLOC PASCAL,MBLOCK

  @@DECODE_ERROR:
	  CALL FCLOSE PASCAL,F
  	  STC
 
  @@DECODE_QUIT:
	  RET
	ENDP


;##############################################################################################
;# VECTOR MODULE									      #
;##############################################################################################

TVECTOR STRUC
	 X DD ?
	 Y DD ?
 	 Z DD ?
TVECTOR ENDS


;CAMERA COEFFS MATRIX -------------------------

M11 DD ? 
M12 DD ?
M13 DD ?
M21 DD ?
M22 DD ?
M23 DD ?
M31 DD ?
M32 DD ?
M33 DD ?
M41 DD ?
M42 DD ?
M43 DD ?

;------------------------------------------------------------------------------------
;SETA OS PARÂMETROS INTERNOS DA CÂMARA (CALCULA OS COEFICIENTES)

DEFINECAM PROC NEAR
	ARG @FI:DWORD, @RO:DWORD, @THETA:DWORD


	MOV EDI,SINTABLE
	MOV ESI,COSTABLE
	MOV ECX,ESI
	MOV EDX,EDI
	MOV EAX,@THETA
	SHL EAX,2
	ADD ESI,EAX
	ADD EDI,EAX
	MOV EBX,ES:[ESI]      		;COS THETA
	MOV M21,EBX
	MOV EBX,ES:[EDI]      		;-SIN THETA
	NEG EBX
	MOV M11,EBX			

	MOV ESI,ECX
	MOV EDI,EDX
	MOV EAX,@FI
	SHL EAX,2
	ADD ESI,EAX
	ADD EDI,EAX

	MOV EBX,ES:[ESI]		;-COS FI
	NEG EBX
	MOV M33,EBX
	SAR EBX,2			;PREVENT OVERFLOW
	PUSH EBX
	PUSH EBX
	MOV EBX,ES:[EDI]		;SIN FI
	MOV M32,EBX
	
	POP EAX
	IMUL M21			;M12:=-CF*CT
	SAR EAX,14
	MOV M12,EAX

	POP EAX
	MOV EBX,M11			;M22:=-CF*ST
	NEG EBX
	MOV ECX,EBX			;SAVE SIN THETA
	IMUL EBX
	SAR EAX,14
	MOV M22,EAX

	MOV EAX,M32			;-SIN FI
	NEG EAX
	SAR EAX,2			;PREVENT OVERFLOW
	MOV EBX,EAX
	IMUL M21			;M13:=-SF*CT		
	SAR EAX,14
	MOV M13,EAX

	MOV EAX,EBX
	IMUL ECX			;M23:=-SF*ST
	SAR EAX,14
	MOV M23,EAX
	
	MOV EAX,@RO
	MOV M43,EAX
	RET
       ENDP	

;------------------------------------------------------------------------------------
;CALCULA AS COORDENADAS DO VECTOR NAS COORDENADAS DA CÂMARA

SCREENCAM PROC NEAR
	  ARG @V:POINTER 
	
	  LOCAL @T:DWORD

	  USES ES
	  LPTR ES,EDI,@V
  	  MOV EAX,ES:[EDI][TVECTOR.X]
	  MOV EBX,EAX
	  IMUL M11			;M11*X
	  MOV ESI,EAX
	  MOV EAX,EBX
	  IMUL M12			;M12*X
	  MOV ECX,EAX
	  MOV EAX,EBX
	  IMUL M13			;M13*X
	  MOV @T,EAX
	  
  	  MOV EAX,ES:[EDI][TVECTOR.Y]
	  MOV EBX,EAX
	  IMUL M21			;M21*Y
	  ADD ESI,EAX
	  MOV EAX,EBX
	  IMUL M22			;M22*Y
	  ADD ECX,EAX
	  MOV EAX,EBX
	  IMUL M23			;M23*Y
	  ADD @T,EAX

  	  MOV EAX,ES:[EDI][TVECTOR.Z]
	  MOV EBX,EAX
	  IMUL M31			;M31*Z
	  ADD ESI,EAX
	  SAR ESI,16
	  MOV EAX,EBX
	  IMUL M32			;M32*Z
	  ADD ECX,EAX
	  SAR ECX,16
	  MOV EAX,EBX
	  IMUL M33			;M33*Z
	  ADD EAX,@T
	  ADD EAX,M43
	  SAR EAX,16
	  MOV ES:[EDI][TVECTOR.X],ESI
	  MOV ES:[EDI][TVECTOR.Y],ECX
	  MOV ES:[EDI][TVECTOR.Z],EAX
	  RET
	 ENDP

;------------------------------------------------------------------------------------
;RODA O VECTOR APONTADO EM V ANGX PASSOS EM TORNO DO EIXO X

ROTATE_X PROC NEAR
	ARG @V:POINTER,@ANGX:DWORD

	USES ES
	MOV EDI,SINTABLE		;SINE OF ANGX
	MOV EAX,@ANGX
	SHL EAX,2
	ADD EDI,EAX
	MOV ECX,ES:[EDI]

	MOV EDI,COSTABLE		;COSINE OF ANGX
	ADD EDI,EAX
	MOV EBX,ES:[EDI]

	LPTR ES,EDI,@V

	MOV EAX,ES:[EDI][TVECTOR.Y]    ;CALC Y*COS(ANG)
	PUSH EAX
	IMUL EBX
	MOV ESI,EAX
	MOV EAX,ES:[EDI][TVECTOR.Z]    ;CALC Z*SIN(ANG)
	IMUL ECX
	SUB ESI,EAX		        ;CALC VO.Y=(Y*COS(ANG))-(Z*SIN(ANG))
	SAR ESI,16			;DIV 65535

	POP EAX				;CALC Y*SIN(ANG)
	PUSH ESI
	IMUL ECX
	MOV ESI,EAX
	MOV EAX,ES:[EDI][TVECTOR.Z]    ;CALC Z*COS(ANG)
	IMUL EBX
	ADD ESI,EAX		       ;CALC VO.Z=(Y*SIN(ANG))+(Z*COS(ANG))
	SAR ESI,16

	MOV ES:[EDI][TVECTOR.Z],ESI
	POP ES:[EDI][TVECTOR.Y]

	RET
ENDP

;------------------------------------------------------------------------------------
;RODA O VECTOR APONTADO EM V ANGY PASSOS EM TORNO DO EIXO Y

ROTATE_Y PROC NEAR
	ARG @V:POINTER,@ANGY:DWORD

	USES ES
	MOV EDI,SINTABLE		;SINE OF ANGY
	MOV EAX,@ANGY
	SHL EAX,2
	ADD EDI,EAX
	MOV ECX,ES:[EDI]

	MOV EDI,COSTABLE		;COSINE OF ANGY
	ADD EDI,EAX
	MOV EBX,ES:[EDI]

	LPTR ES,EDI,@V

	MOV EAX,ES:[EDI][TVECTOR.X]    ;CALC X*COS(ANG)
	IMUL EBX
	MOV ESI,EAX
	MOV EAX,ES:[EDI][TVECTOR.Z]    ;CALC Z*SIN(ANG)
	PUSH EAX
	IMUL ECX
	ADD ESI,EAX		        ;CALC VO.X=(X*COS(ANG))+(Z*SIN(ANG))
	SAR ESI,16			;DIV 65535

	POP EAX				;CALC Z*COS(ANG)
	PUSH ESI
	IMUL EBX
	MOV ESI,EAX
	MOV EAX,ES:[EDI][TVECTOR.X]    ;CALC X*SIN(ANG)
	IMUL ECX
	SUB ESI,EAX		       ;CALC VO.Z=(Z*COS(ANG))-(X*SIN(ANG))
	SAR ESI,16

	MOV ES:[EDI][TVECTOR.Z],ESI
	POP ES:[EDI][TVECTOR.X]

 	RET
ENDP


;------------------------------------------------------------------------------------
;RODA O VECTOR APONTADO EM V ANGZ PASSOS EM TORNO DO EIXO Z

ROTATE_Z PROC NEAR
	ARG @V:POINTER,@ANGZ:DWORD

	USES ES
	MOV EDI,SINTABLE		;SINE OF ANGX
	MOV EAX,@ANGZ
	SHL EAX,2
	ADD EDI,EAX
	MOV ECX,ES:[EDI]

	MOV EDI,COSTABLE		;COSINE OF ANGX
	ADD EDI,EAX
	MOV EBX,ES:[EDI]

	LPTR ES,EDI,@V

	MOV EAX,ES:[EDI][TVECTOR.X]    ;CALC X*COS(ANG)
	PUSH EAX
	IMUL EBX
	MOV ESI,EAX
	MOV EAX,ES:[EDI][TVECTOR.Y]    ;CALC Y*SIN(ANG)
	IMUL ECX
	SUB ESI,EAX		        ;CALC VO.X=(X*COS(ANG))-(Y*SIN(ANG))
	SAR ESI,16			;DIV 65535

	POP EAX				;CALC X*SIN(ANG)
	PUSH ESI
	IMUL ECX
	MOV ESI,EAX
	MOV EAX,ES:[EDI][TVECTOR.Y]    ;CALC Y*COS(ANG)
	IMUL EBX
	ADD ESI,EAX		       ;CALC VO.Y=(X*SIN(ANG))+(Y*COS(ANG))
	SAR ESI,16

	MOV ES:[EDI][TVECTOR.Y],ESI
	POP ES:[EDI][TVECTOR.X]

	RET
ENDP


F1 DD ?
FNAME  DB 'D:\LOGO1.GR',0
FNAME2 DB 'D:\TESTE.PCX',0

RRFT DB 16 DUP(0)
ALIGN 16
;##############################################################################################
;# MAIN MODULE 										      #
;##############################################################################################

V1 TVECTOR <100,100,100>
V2 TVECTOR <200,100,100>
V3 TVECTOR <200,200,100>
V4 TVECTOR <100,200,100>

LINE PROC NEAR
	ARG @X:DWORD,@Y:DWORD,@X1:DWORD,@Y1:DWORD,@C:DWORD

 	LOCAL I:WORD,DELTAX:WORD,DELTAY:WORD,NUMPIX:WORD,D:WORD,I1:WORD,I2:WORD
	LOCAL TX:WORD,TY:WORD,XINC1:WORD,XINC2:WORD,YINC1:WORD,YINC2:WORD;
 	LOCAL P:WORD;

	MOV EAX,@X1
	MOV EBX,@Y1

	SUB EAX,@X                ;{DELTAX:=ABS(X1-X)}
	JNS @BRES_DELTAY
	NEG AX

@BRES_DELTAY:
	SUB EBX,@Y                ;{DELTAY:=ABS(Y1-Y)}
	JNS @BRES_DELTA_DONE
	NEG BX

@BRES_DELTA_DONE:
	MOV DELTAX,AX
	MOV DELTAY,BX

	CMP AX,BX     ;{IF DELTAX>=DELTAY THEN}
JL @BRES_ENTRY_1

	MOV NUMPIX,AX
	INC NUMPIX    ;{NUMPIX:=DELTAX+1}
	MOV CX,BX
	SHL CX,1
	SUB CX,AX
	MOV D,CX      ;{D:=(2*DELTAY)-DELTAX}
	MOV I1,BX
	SHL I1,1
	MOV CX,BX
	SUB CX,AX
	SHL CX,1
	MOV I2,CX    ;{I2:=(DELTAY-DELTAX) SHL 1}

	XOR DX,DX
	MOV YINC1,DX
	INC DX
	MOV XINC1,DX
	MOV XINC2,DX
	MOV YINC2,DX
	JMP @BRES_ENTRY_2

@BRES_ENTRY_1:
	MOV NUMPIX,BX
	INC NUMPIX    ;{NUMPIX:=DELTAY+1}
	MOV CX,AX
	SHL CX,1
	SUB CX,BX
	MOV D,CX      ;{D:=(2*DELTAX)-DELTAY}
	MOV I1,AX
	SHL I1,1
	MOV CX,AX
	SUB CX,BX
	SHL CX,1
	MOV I2,CX    ;{I2:=(DELTAX-DELTAY) SHL 1}

	XOR DX,DX
	MOV XINC1,DX
	INC DX
	MOV YINC1,DX
	MOV XINC2,DX
	MOV YINC2,DX

@BRES_ENTRY_2:
	DEC DX
	MOV P,DX    ;{P:=0}

	MOV EAX,@X
	MOV EBX,@Y


	CMP EAX,@X1
	JLE @BRES_ENTRY_Y
	NEG XINC1
	NEG XINC2

@BRES_ENTRY_Y:
	CMP EBX,@Y1
	JLE @BRES_LINE_LOOP
	NEG YINC1
	NEG YINC2

@BRES_LINE_LOOP:

 	MOV AX,0FFFFh
 	MOV BX,1
	MOV CX,P
	SHL BX,CL
	 AND AX,BX
	CMP AX,0
	JE @BRES_SKIP_PIXEL

	 PUSH @X
	 PUSH @Y
	 PUSH @C
	 CALL PUTPIXEL

 @BRES_SKIP_PIXEL:
	  INC P
	  CMP P,16
	  JNE @BRES_CMP_D
	  MOV AX,0
	  MOV P,AX

 @BRES_CMP_D:
	  CMP D,0
	  JGE @BRES_CMP_D_ELSE
	  MOV AX,I1
	  ADD D,AX
	  MOVZX EBX,XINC1
	  ADD @X,Ebx
	  MOVZX EBX,yinc1
	  ADD @Y,EBX
  JMP @BRES_PROCESS_LOOP

 @BRES_CMP_D_ELSE:
	  MOV AX,I2
	  ADD D,AX
	  MOVZX EBX,XINC2
	  ADD @X,EBX
	  MOVZX EBX,YINC2
	  ADD @Y,EBX

@BRES_PROCESS_LOOP:
	  DEC NUMPIX
	  JNZ @BRES_LINE_LOOP
	RET
ENDP



MAINSTART

;------------------------------------------------------------------------
 	
@GO:

   CALL ALLOCTRIGTABLES			     ;INIT TRIGONOMETRIC TABLES

   CALL GETVESAINFO
   CALL GETMODEINFO PASCAL,_640X480X256
   CMP AL,1
   JE @QUIT

   CALL SETVESAMODE PASCAL,_640X480X256
   CMP AL,0
   JNE @QUIT

   MOV	SCREENSIZE,307200

   CALL MALLOC PASCAL,310000  ;310K
   MOV FRAMEBUFFER,EDI

   CALL INITZBUFFER

   CALL INIT_DOSBUFFER		
;------------------------------------------------------------------------

   XOR EAX,EAX
   CALL CLS
   CALL FOPEN PASCAL,OFFSET FNAME,02h
   MOV F1,EAX
   CALL FREAD PASCAL,F1,ES,FRAMEBUFFER,307200
   CALL FCLOSE PASCAL,F1
   XOR EAX,EAX
   CALL CLS
  
;   CALL DECODEPCX PASCAL,OFFSET FNAME2,ES,FRAMEBUFFER
  CALL DECODEGR PASCAL,OFFSET FNAME,ES,FRAMEBUFFER
   CALL TRANSFER
   xor eax,eax
   intr 16H


   MOV EAX,0F0F0F0F0h
   CALL CLS 

   MOV EAX,350
   CALL CLZ
  

;   CALL BAR PASCAL,200,200,500,400,512,2

;   CALL PIXEL3D PASCAL,100,100,1,7
;   CALL RANDOMIZE

    CALL DEFINECAM PASCAL,130,590,170
    CALL SCREENCAM PASCAL,DS,OFFSET V1
    CALL ROTATE_Z PASCAL,DS,OFFSET V1,200
    CALL ROTATE_Y PASCAL,DS,OFFSET V1,200  
    CALL ROTATE_X PASCAL,DS,OFFSET V1,200

    CALL ROTATE_Z PASCAL,DS,OFFSET V2,200
    CALL ROTATE_Y PASCAL,DS,OFFSET V2,200  
    CALL ROTATE_X PASCAL,DS,OFFSET V2,200

    CALL ROTATE_Z PASCAL,DS,OFFSET V3,200
    CALL ROTATE_Y PASCAL,DS,OFFSET V3,200  
    CALL ROTATE_X PASCAL,DS,OFFSET V3,200

   CALL LINE PASCAL,V1.X,V1.Y,V2.X,V2.Y,7
   CALL LINE PASCAL,V2.X,V2.Y,V3.X,V3.Y,7  
 ;  CALL LINE PASCAL,V3.X,V3.Y,V4.X,V4.Y,7
 
 CALL TRANSFER
  
;   CALL GETPAL PASCAL,DS,OFFSET TEMPP2
;   CALL GETPAL PASCAL,DS,OFFSET TEMPP

 ;  CALL FADEIN PASCAL,DS,OFFSET TEMPP2 
;   CALL FADEOUT PASCAL,DS,OFFSET TEMPP,DS,OFFSET TEMPP2


  XOR AX,AX
  INTR 16H

  mov ax,03h
  intr 10h
;    CALL SHOWVAL PASCAL,TESTV.X,' ',10
;    CALL SHOWVAL PASCAL,TESTV.Y,' ',10
;    CALL SHOWVAL PASCAL,TESTV.Z,' ',10

    CALL SHOWVAL PASCAL,M11,' ',10
    CALL SHOWVAL PASCAL,M12,' ',10
    CALL SHOWVAL PASCAL,M13,' ',10
    CALL SHOWVAL PASCAL,M21,' ',10
    CALL SHOWVAL PASCAL,M22,' ',10
    CALL SHOWVAL PASCAL,M23,' ',10
    CALL SHOWVAL PASCAL,M31,' ',10
    CALL SHOWVAL PASCAL,M32,' ',10
    CALL SHOWVAL PASCAL,M33,' ',10
    CALL SHOWVAL PASCAL,M41,' ',10
    CALL SHOWVAL PASCAL,M42,' ',10
    CALL SHOWVAL PASCAL,M43,' ',10

  CALL FREE_DOSBUFFER  

;------------------------------------------------------------------------


@QUIT:
   RET

MAINENDS


CODEENDS

END




